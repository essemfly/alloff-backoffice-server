name: Deploy to Amazon ECS - PROD

on:
  push:
    branches:
      - prod

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: backoffice-server-prod
  ECS_SERVICE_OFFICE: backoffice-server-prod
  ECS_SERVICE_COMPANY: backoffice-server-prod-company
  ECS_CLUSTER: backoffice-server
  ECS_TASK_DEFINITION_OFFICE: .aws/task-definition-prod.json
  ECS_TASK_DEFINITION_COMPANY: .aws/task-definition-prod-company.json
  CONTAINER_NAME_OFFICE: backoffice-server-prod
  CONTAINER_NAME_COMPANY: backoffice-server-prod-company

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure ENV variables
        run: |
          echo "COMMIT_SHA=${{ github.sha }}
          ${{ secrets.ENV_PROD }}" > .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition (Office)
        id: task-def-office
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_OFFICE }}
          container-name: ${{ env.CONTAINER_NAME_OFFICE }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Fill in the new image ID in the Amazon ECS task definition (Company API)
        id: task-def-company
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_COMPANY }}
          container-name: ${{ env.CONTAINER_NAME_COMPANY }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition (Company API)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-company.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_COMPANY }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false

      - name: Deploy Amazon ECS task definition (Office)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-office.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_OFFICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: action-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Github Action # default: 8398a7@action-slack
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
