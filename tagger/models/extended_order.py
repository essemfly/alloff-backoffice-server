from bson import ObjectId
from django.db import models
from shortuuid import ShortUUID

from alloff_backoffice_server.settings import ORDER_CODE_CHARSET, ORDER_CODE_LENGTH


class ExtendedOrder(models.Model):
    code = models.CharField(max_length=10, unique=True, db_index=True, null=False)
    order_id = models.CharField(max_length=30, unique=True, db_index=True, null=False)

    ordered_at = models.DateTimeField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    @staticmethod
    def make_from(order, code=None) -> "ExtendedOrder":
        order_id = str(order.id)
        if ExtendedOrder.objects.filter(order_id=order_id).count() > 0:
            raise BaseException(f"Order {order_id} is already extended!")
        return ExtendedOrder.objects.create(
            order_id=order_id,
            ordered_at=order.created,
            code=code,  # If None, a new one will be generated by the save() hook.
        )

    def save(self, force_insert=False, force_update=False, using=None,
             update_fields=None):
        if self.code is None:
            self.code = ExtendedOrder.generate_usable_code()
        return super().save(force_insert, force_update, using, update_fields)

    @staticmethod
    def generate_usable_code():
        code = ""
        is_unique = False

        while not is_unique:
            code = ExtendedOrder._make_code()
            if ExtendedOrder.objects.filter(code=code).count() == 0:
                is_unique = True

        return code

    @staticmethod
    def _make_code():
        return ShortUUID(ORDER_CODE_CHARSET).random(length=ORDER_CODE_LENGTH)

    @property
    def order(self):
        from tagger.core.mongo.models.order import Order
        return Order.objects(id=ObjectId(self.order_id)).first()
